# This workflow will build all geoipsets, load each set into nftables/iptables and use the set in a rule

name: ci

on:
  push:
    branches: [ '*' ]
  workflow_dispatch:
  schedule:
    - cron: '14 14 * * 3'

jobs:
  generate-geoipsets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        #  TODO: checkout master & latest tag/release
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          # TODO: test against all supported python versions
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build geoipsets
        run: |
          python -m geoipsets --provider dbip --firewall nftables --firewall iptables --address-family ipv4 --address-family ipv6
          if [ "$?" -ne 0 ]; then exit 1; fi
          ls -R /tmp/geoipsets
        working-directory: ./python
      - name: Upload geoipsets
        uses: actions/upload-artifact@v4
        with:
          name: geoipsets-data
          path: /tmp/geoipsets

  run-integration-tests:
    needs: generate-geoipsets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
#        provider: [ dbip, maxmind ]
        firewall: [ nftset, ipset ]
        address-family: [ ipv4, ipv6 ]
    steps:
      - name: Download geoipsets
        uses: actions/download-artifact@v4
        with:
          name: geoipsets-data
          path: /tmp/geoipsets
      - uses: actions/checkout@v4
      - name: Run integration tests
        working-directory: ./scripts
        run: |
          sudo bash integration_test.sh dbip ${{ matrix.firewall }} ${{ matrix.address-family }}
          if [ "$?" -ne 0 ]; then exit 1; fi
